     1                                  ;------------------------------------------------------------------------------
     2                                  ; main.asm - содержит главную функцию,
     3                                  ; обеспечивающую простое тестирование
     4                                  ;------------------------------------------------------------------------------
     5                                  ; main.asm
     6                                  
     7                                  global  SPHERE
     8                                  global  PARALLELEPIPED
     9                                  global  TETRAHEDRON
    10                                  
    11                                  %include "macros.mac"
    12                              <1> ; macros.mac - файл с макроопределениями
    13                              <1> 
    14                              <1> extern  fopen
    15                              <1> extern  fscanf
    16                              <1> extern  fclose
    17                              <1> extern  fprintf
    18                              <1> extern  printf
    19                              <1> extern  stdout
    20                              <1> extern  time
    21                              <1> extern  srand
    22                              <1> extern  strcmp
    23                              <1> extern  atoi
    24                              <1> extern  clock
    25                              <1> extern  CLOCKS_PER_SEC
    26                              <1> 
    27                              <1> extern  InContainer
    28                              <1> extern  InRndContainer
    29                              <1> extern  OutContainer
    30                              <1> extern  PerimeterSumContainer
    31                              <1> 
    32                              <1> ;-------------------------------------------------------------
    33                              <1> ; Вывод строки символов из буфера
    34                              <1> %macro	PrintStrBuf 2
    35                              <1>         mov rdi, %2
    36                              <1>         mov rsi, %1
    37                              <1>         xor rax, rax
    38                              <1>         call fprintf
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> ;-------------------------------------------------------------
    42                              <1> ; Вывод строки, передаваемой непосредственно макросу
    43                              <1> %macro  PrintStr    2
    44                              <1>     section .data
    45                              <1>         %%arg1  db  %1,0        ; first argument
    46                              <1>     section .text               ; the printf arguments
    47                              <1>         mov rdi, %2
    48                              <1>         mov rsi, %%arg1
    49                              <1>         mov rax, 0              ; no floating point
    50                              <1>         call fprintf
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;-------------------------------------------------------------
    54                              <1> ; Вывод строки, передаваемой непосредственно макросу
    55                              <1> ; с переводом на следующую строку
    56                              <1> %macro  PrintStrLn    2
    57                              <1>     section .data
    58                              <1>         %%arg1  db  %1,10,0     ; first argument
    59                              <1>     section .text               ; the printf arguments
    60                              <1>         mov rdi, %2
    61                              <1>         mov rsi, %%arg1
    62                              <1>         mov rax, 0              ; no floating point
    63                              <1>         call fprintf
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> ;-------------------------------------------------------------
    67                              <1> ; Вывод целого числа
    68                              <1> %macro  PrintInt    2
    69                              <1>     section .data
    70                              <1>         %%arg1  db  "%d",0     ; first argument
    71                              <1>     section .text               ; the printf arguments
    72                              <1>         mov rdi, %2
    73                              <1>         mov rsi, %%arg1
    74                              <1>         mov rdx, %1
    75                              <1>         mov rax, 0              ; no floating point
    76                              <1>         call fprintf
    77                              <1> %endmacro
    78                              <1> 
    79                              <1> ;-------------------------------------------------------------
    80                              <1> ; Вывод 64-разрядного беззнакового целого числа
    81                              <1> %macro  PrintLLUns    2
    82                              <1>     section .data
    83                              <1>         %%arg1  db  "%llu",0     ; first argument
    84                              <1>     section .text               ; the printf arguments
    85                              <1>         mov rdi, %2
    86                              <1>         mov rsi, %%arg1
    87                              <1>         mov rdx, %1
    88                              <1>         mov rax, 0              ; no floating point
    89                              <1>         call fprintf
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> ;-------------------------------------------------------------
    93                              <1> ; Вывод действительного числа двойной точности
    94                              <1> %macro  PrintDouble    2
    95                              <1>     section .data
    96                              <1>         %%arg1  db  "%g",0     ; first argument
    97                              <1>     section .text               ; the printf arguments
    98                              <1>         mov rdi, %2
    99                              <1>         mov rsi, %%arg1
   100                              <1>         movsd xmm0, %1
   101                              <1>         mov rax, 1              ; no floating point
   102                              <1>         call fprintf
   103                              <1> %endmacro
   104                              <1> 
   105                              <1> ;-------------------------------------------------------------
   106                              <1> ; Вывод содержимого контейнера
   107                              <1> %macro  PrintContainer    3
   108                              <1>     mov     rdi, %1
   109                              <1>     mov     esi, %2
   110                              <1>     mov     rdx, %3
   111                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   112                              <1>     call    OutContainer
   113                              <1> %endmacro
   114                              <1> 
   115                              <1> ;-------------------------------------------------------------
   116                              <1> ; Вычисление суммы периметров фигур в контейнере
   117                              <1> %macro  ContainerSum    3
   118                              <1>     mov     rdi, %1
   119                              <1>     mov     rsi, %2
   120                              <1>     call    PerimeterSumContainer
   121                              <1>     movsd   %3, xmm0
   122                              <1> %endmacro
   123                              <1> 
   124                              <1> ;-------------------------------------------------------------
   125                              <1> ; Открытие файла для чтения, записи
   126                              <1> %macro  FileOpen   3
   127                              <1>     section .data
   128                              <1>         %%rw  db  %2,0          ; признак доступа
   129                              <1>     section .text               ; the printf arguments
   130                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   131                              <1>         lea     rsi, %%rw       ; строка определяющая чтение-запись. Задается явно
   132                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   133                              <1>         call    fopen
   134                              <1>         mov     [%3], rax
   135                              <1> %endmacro
   136                              <1> 
   137                              <1> ;-------------------------------------------------------------
   138                              <1> ; Закрытие открытого файла
   139                              <1> %macro  FileClose   1
   140                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   141                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   142                              <1>     call    fclose
   143                              <1> %endmacro
   144                              <1> 
    12                                  
    13                                  section .data
    14 00000000 01000000                    SPHERE   dd  1
    15 00000004 02000000                    PARALLELEPIPED    dd  2
    16 00000008 03000000                    TETRAHEDRON dd 3
    17                                  
    18 0000000C 000000000000F03F            oneDouble   dq  1.0
    19 00000014 496E636F7272656374-         erMsg1  db "Incorrect number of arguments = %d: ",10,0
    19 0000001D 206E756D626572206F-
    19 00000026 6620617267756D656E-
    19 0000002F 7473203D2025643A20-
    19 00000038 0A00               
    20 0000003A 2D6E00                      rndGen  db "-n",0
    21 0000003D 2D6600                      fileGen  db "-f",0
    22 00000040 696E636F7272656374-         errMessage1 db  "incorrect command line!", 10,"  Waited:",10
    22 00000049 20636F6D6D616E6420-
    22 00000052 6C696E65210A202057-
    22 0000005B 61697465643A0A     
    23 00000062 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    23 0000006B 616E64202D6620696E-
    23 00000074 66696C65206F757466-
    23 0000007D 696C653031206F7574-
    23 00000086 66696C6530320A2020-
    23 0000008F 4F723A0A           
    24 00000093 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    24 0000009C 616E64202D6E206E75-
    24 000000A5 6D626572206F757466-
    24 000000AE 696C653031206F7574-
    24 000000B7 66696C6530320A00   
    25 000000BF 696E636F7272656374-         errMessage2 db  "incorrect qualifier value!", 10,"  Waited:",10
    25 000000C8 207175616C69666965-
    25 000000D1 722076616C7565210A-
    25 000000DA 20205761697465643A-
    25 000000E3 0A                 
    26 000000E4 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    26 000000ED 616E64202D6620696E-
    26 000000F6 66696C65206F757466-
    26 000000FF 696C653031206F7574-
    26 00000108 66696C6530320A2020-
    26 00000111 4F723A0A           
    27 00000115 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    27 0000011E 616E64202D6E206E75-
    27 00000127 6D626572206F757466-
    27 00000130 696C653031206F7574-
    27 00000139 66696C6530320A00   
    28 00000141 00000000                    len         dd  0           ; Количество элементов в массиве
    29                                  section .bss
    30 00000000 ????????                    argc        resd    1
    31 00000004 ????????                    num         resd    1
    32 00000008 ????????????????            sum         resq    1
    33 00000010 ????????????????            start       resq    1       ; начало отсчета времени
    34 00000018 ????????????????            delta       resq    1       ; интервал отсчета времени
    35 00000020 <res 10h>                   startTime   resq    2       ; начало отсчета времени
    36 00000030 <res 10h>                   endTime     resq    2       ; конец отсчета времени
    37 00000040 <res 10h>                   deltaTime   resq    2       ; интервал отсчета времени
    38 00000050 ????????????????            ifst        resq    1       ; указатель на файл, открываемый файл для чтения фигур
    39 00000058 ????????????????            ofst1       resq    1       ; указатель на файл, открываемый файл для записи контейнера
    40 00000060 ????????????????            ofst2       resq    1       ; указатель на файл, открываемый файл для записи периметра
    41 00000068 <res 27100h>                cont        resb    160000  ; Массив используемый для хранения данных
    42                                  
    43                                  section .text
    44                                      global main
    45                                  main:
    46 00000000 55                      push rbp
    47 00000001 4889E5                  mov rbp,rsp
    48                                  
    49 00000004 893C25[00000000]            mov dword [argc], edi ;rdi contains number of arguments
    50 0000000B 4989FC                      mov r12, rdi ;rdi contains number of arguments
    51 0000000E 4989F5                      mov r13, rsi ;rsi contains the address to the array of arguments
    52                                  
    53                                  .printArguments:
    54                                      PrintStrLn "The command and arguments:", [stdout]
    57                              <1>  section .data
    58 00000145 54686520636F6D6D61- <1>  %%arg1 db %1,10,0
    58 0000014E 6E6420616E64206172- <1>
    58 00000157 67756D656E74733A0A- <1>
    58 00000160 00                  <1>
    59                              <1>  section .text
    60 00000011 488B3C25[00000000]  <1>  mov rdi, %2
    61 00000019 48BE-               <1>  mov rsi, %%arg1
    61 0000001B [4501000000000000]  <1>
    62 00000023 B800000000          <1>  mov rax, 0
    63 00000028 E8(00000000)        <1>  call fprintf
    55 0000002D BB00000000                  mov rbx, 0
    56                                  .printLoop:
    57                                      PrintStrBuf qword [r13+rbx*8], [stdout]
    35 00000032 488B3C25[00000000]  <1>  mov rdi, %2
    36 0000003A 498B74DD00          <1>  mov rsi, %1
    37 0000003F 4831C0              <1>  xor rax, rax
    38 00000042 E8(00000000)        <1>  call fprintf
    58                                      PrintStr    10, [stdout]
    44                              <1>  section .data
    45 00000161 0A00                <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 00000047 488B3C25[00000000]  <1>  mov rdi, %2
    48 0000004F 48BE-               <1>  mov rsi, %%arg1
    48 00000051 [6101000000000000]  <1>
    49 00000059 B800000000          <1>  mov rax, 0
    50 0000005E E8(00000000)        <1>  call fprintf
    59 00000063 48FFC3                      inc rbx
    60 00000066 4C39E3                      cmp rbx, r12
    61 00000069 7CC7                        jl .printLoop
    62                                  
    63 0000006B 4983FC05                    cmp r12, 5      ; проверка количества аргументов
    64 0000006F 741F                        je .next1
    65                                      PrintStrBuf errMessage1, [stdout]
    35 00000071 488B3C25[00000000]  <1>  mov rdi, %2
    36 00000079 48BE-               <1>  mov rsi, %1
    36 0000007B [4000000000000000]  <1>
    37 00000083 4831C0              <1>  xor rax, rax
    38 00000086 E8(00000000)        <1>  call fprintf
    66 0000008B E93B050000                  jmp .return
    67                                  .next1:
    68                                      PrintStrLn "Start", [stdout]
    57                              <1>  section .data
    58 00000163 53746172740A00      <1>  %%arg1 db %1,10,0
    59                              <1>  section .text
    60 00000090 488B3C25[00000000]  <1>  mov rdi, %2
    61 00000098 48BE-               <1>  mov rsi, %%arg1
    61 0000009A [6301000000000000]  <1>
    62 000000A2 B800000000          <1>  mov rax, 0
    63 000000A7 E8(00000000)        <1>  call fprintf
    69                                      ; Проверка второго аргумента
    70 000000AC 48BF-                       mov rdi, rndGen
    70 000000AE [3A00000000000000] 
    71 000000B6 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    72 000000BA E8(00000000)                call strcmp
    73 000000BF 4883F800                    cmp rax, 0          ; строки равны "-n"
    74 000000C3 743C                        je .next2
    75 000000C5 48BF-                       mov rdi, fileGen
    75 000000C7 [3D00000000000000] 
    76 000000CF 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    77 000000D3 E8(00000000)                call strcmp
    78 000000D8 4883F800                    cmp rax, 0          ; строки равны "-f"
    79 000000DC 0F84C2000000                je .next3
    80                                      PrintStrBuf errMessage2, [stdout]
    35 000000E2 488B3C25[00000000]  <1>  mov rdi, %2
    36 000000EA 48BE-               <1>  mov rsi, %1
    36 000000EC [BF00000000000000]  <1>
    37 000000F4 4831C0              <1>  xor rax, rax
    38 000000F7 E8(00000000)        <1>  call fprintf
    81 000000FC E9CA040000                  jmp .return
    82                                  .next2:
    83                                      ; Генерация случайных фигур
    84 00000101 498B7D10                    mov rdi, [r13+16]
    85 00000105 E8(00000000)                call atoi
    86 0000010A 890425[04000000]            mov [num], eax
    87                                      PrintInt [num], [stdout]
    69                              <1>  section .data
    70 0000016A 256400              <1>  %%arg1 db "%d",0
    71                              <1>  section .text
    72 00000111 488B3C25[00000000]  <1>  mov rdi, %2
    73 00000119 48BE-               <1>  mov rsi, %%arg1
    73 0000011B [6A01000000000000]  <1>
    74 00000123 488B1425[04000000]  <1>  mov rdx, %1
    75 0000012B B800000000          <1>  mov rax, 0
    76 00000130 E8(00000000)        <1>  call fprintf
    88                                      PrintStrLn "", [stdout]
    57                              <1>  section .data
    58 0000016D 0A00                <1>  %%arg1 db %1,10,0
    59                              <1>  section .text
    60 00000135 488B3C25[00000000]  <1>  mov rdi, %2
    61 0000013D 48BE-               <1>  mov rsi, %%arg1
    61 0000013F [6D01000000000000]  <1>
    62 00000147 B800000000          <1>  mov rax, 0
    63 0000014C E8(00000000)        <1>  call fprintf
    89 00000151 8B0425[04000000]            mov eax, [num]
    90 00000158 83F801                      cmp eax, 1
    91 0000015B 0F8C0E040000                jl .fall1
    92 00000161 3D10270000                  cmp eax, 10000
    93 00000166 0F8F03040000                jg .fall1
    94                                      ; Начальная установка генератора случайных чисел
    95 0000016C 4831FF                      xor     rdi, rdi
    96 0000016F 4831C0                      xor     rax, rax
    97 00000172 E8(00000000)                call    time
    98 00000177 4889C7                      mov     rdi, rax
    99 0000017A 4831C0                      xor     rax, rax
   100 0000017D E8(00000000)                call    srand
   101                                      ; Заполнение контейнера случайными фигурами
   102 00000182 48BF-                       mov     rdi, cont   ; передача адреса контейнера
   102 00000184 [6800000000000000] 
   103 0000018C 48BE-                       mov     rsi, len    ; передача адреса для длины
   103 0000018E [4101000000000000] 
   104 00000196 8B1425[04000000]            mov     edx, [num]  ; передача количества порождаемых фигур
   105 0000019D E8(00000000)                call    InRndContainer
   106 000001A2 EB54                        jmp .task2
   107                                  
   108                                  .next3:
   109                                      ; Получение фигур из файла
   110                                      FileOpen [r13+16], "r", ifst
   127                              <1>  section .data
   128 0000016F 7200                <1>  %%rw db %2,0
   129                              <1>  section .text
   130 000001A4 498B7D10            <1>  mov rdi, %1
   131 000001A8 488D3425[6F010000]  <1>  lea rsi, %%rw
   132 000001B0 B800000000          <1>  mov rax, 0
   133 000001B5 E8(00000000)        <1>  call fopen
   134 000001BA 48890425[50000000]  <1>  mov [%3], rax
   111                                      ; Заполнение контейнера фигурами из файла
   112 000001C2 48BF-                       mov     rdi, cont           ; адрес контейнера
   112 000001C4 [6800000000000000] 
   113 000001CC 48BE-                       mov     rsi, len            ; адрес для установки числа элементов
   113 000001CE [4101000000000000] 
   114 000001D6 488B1425[50000000]          mov     rdx, [ifst]         ; указатель на файл
   115 000001DE 4831C0                      xor     rax, rax
   116 000001E1 E8(00000000)                call    InContainer         ; ввод данных в контейнер
   117                                      FileClose [ifst]
   140 000001E6 488B3C25[50000000]  <1>  mov rdi, %1
   141 000001EE B800000000          <1>  mov rax, 0
   142 000001F3 E8(00000000)        <1>  call fclose
   118                                  
   119                                  .task2:
   120                                      ; Вывод содержимого контейнера
   121                                      PrintStrLn "Filled container:", [stdout]
    57                              <1>  section .data
    58 00000171 46696C6C656420636F- <1>  %%arg1 db %1,10,0
    58 0000017A 6E7461696E65723A0A- <1>
    58 00000183 00                  <1>
    59                              <1>  section .text
    60 000001F8 488B3C25[00000000]  <1>  mov rdi, %2
    61 00000200 48BE-               <1>  mov rsi, %%arg1
    61 00000202 [7101000000000000]  <1>
    62 0000020A B800000000          <1>  mov rax, 0
    63 0000020F E8(00000000)        <1>  call fprintf
   122                                      PrintContainer cont, [len], [stdout]
   108 00000214 48BF-               <1>  mov rdi, %1
   108 00000216 [6800000000000000]  <1>
   109 0000021E 8B3425[41010000]    <1>  mov esi, %2
   110 00000225 488B1425[00000000]  <1>  mov rdx, %3
   111 0000022D B800000000          <1>  mov rax, 0
   112 00000232 E8(00000000)        <1>  call OutContainer
   123                                  
   124                                      FileOpen [r13+24], "w", ofst1
   127                              <1>  section .data
   128 00000184 7700                <1>  %%rw db %2,0
   129                              <1>  section .text
   130 00000237 498B7D18            <1>  mov rdi, %1
   131 0000023B 488D3425[84010000]  <1>  lea rsi, %%rw
   132 00000243 B800000000          <1>  mov rax, 0
   133 00000248 E8(00000000)        <1>  call fopen
   134 0000024D 48890425[58000000]  <1>  mov [%3], rax
   125                                      PrintStrLn "Filled container:", [ofst1]
    57                              <1>  section .data
    58 00000186 46696C6C656420636F- <1>  %%arg1 db %1,10,0
    58 0000018F 6E7461696E65723A0A- <1>
    58 00000198 00                  <1>
    59                              <1>  section .text
    60 00000255 488B3C25[58000000]  <1>  mov rdi, %2
    61 0000025D 48BE-               <1>  mov rsi, %%arg1
    61 0000025F [8601000000000000]  <1>
    62 00000267 B800000000          <1>  mov rax, 0
    63 0000026C E8(00000000)        <1>  call fprintf
   126                                      PrintContainer cont, [len], [ofst1]
   108 00000271 48BF-               <1>  mov rdi, %1
   108 00000273 [6800000000000000]  <1>
   109 0000027B 8B3425[41010000]    <1>  mov esi, %2
   110 00000282 488B1425[58000000]  <1>  mov rdx, %3
   111 0000028A B800000000          <1>  mov rax, 0
   112 0000028F E8(00000000)        <1>  call OutContainer
   127                                      FileClose [ofst1]
   140 00000294 488B3C25[58000000]  <1>  mov rdi, %1
   141 0000029C B800000000          <1>  mov rax, 0
   142 000002A1 E8(00000000)        <1>  call fclose
   128                                  
   129                                      ; Вычисление времени старта
   130 000002A6 B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   131 000002AB 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   132 000002AD 488D3425[20000000]          lea rsi, [startTime]
   133 000002B5 0F05                        syscall        ; [time] contains number of seconds
   134                                                     ; [time + 8] contains number of nanoseconds
   135                                  
   136                                      ContainerSum cont, [len], [sum]
   118 000002B7 48BF-               <1>  mov rdi, %1
   118 000002B9 [6800000000000000]  <1>
   119 000002C1 488B3425[41010000]  <1>  mov rsi, %2
   120 000002C9 E8(00000000)        <1>  call PerimeterSumContainer
   121 000002CE F20F110425-         <1>  movsd %3, xmm0
   121 000002D3 [08000000]          <1>
   137                                  
   138                                      ; Вычисление времени завершения
   139 000002D7 B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   140 000002DC 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   141 000002DE 488D3425[30000000]          lea rsi, [endTime]
   142 000002E6 0F05                        syscall        ; [time] contains number of seconds
   143                                                     ; [time + 8] contains number of nanoseconds
   144                                  
   145                                      ; Получение времени работы
   146 000002E8 488B0425[30000000]          mov rax, [endTime]
   147 000002F0 482B0425[20000000]          sub rax, [startTime]
   148 000002F8 488B1C25[38000000]          mov rbx, [endTime+8]
   149 00000300 488B0C25[28000000]          mov rcx, [startTime+8]
   150 00000308 4839CB                      cmp rbx, rcx
   151 0000030B 7D0A                        jge .subNanoOnly
   152                                      ; иначе занимаем секунду
   153 0000030D 48FFC8                      dec rax
   154 00000310 4881C300CA9A3B              add rbx, 1000000000
   155                                  .subNanoOnly:
   156 00000317 482B1C25[28000000]          sub rbx, [startTime+8]
   157 0000031F 48890425[40000000]          mov [deltaTime], rax
   158 00000327 48891C25[48000000]          mov [deltaTime+8], rbx
   159                                  
   160                                      ; Вывод периметра нескольких фигур
   161                                      PrintStr "Perimeter sum = ", [stdout]
    44                              <1>  section .data
    45 00000199 506572696D65746572- <1>  %%arg1 db %1,0
    45 000001A2 2073756D203D2000    <1>
    46                              <1>  section .text
    47 0000032F 488B3C25[00000000]  <1>  mov rdi, %2
    48 00000337 48BE-               <1>  mov rsi, %%arg1
    48 00000339 [9901000000000000]  <1>
    49 00000341 B800000000          <1>  mov rax, 0
    50 00000346 E8(00000000)        <1>  call fprintf
   162                                      PrintDouble [sum], [stdout]
    95                              <1>  section .data
    96 000001AA 256700              <1>  %%arg1 db "%g",0
    97                              <1>  section .text
    98 0000034B 488B3C25[00000000]  <1>  mov rdi, %2
    99 00000353 48BE-               <1>  mov rsi, %%arg1
    99 00000355 [AA01000000000000]  <1>
   100 0000035D F20F100425-         <1>  movsd xmm0, %1
   100 00000362 [08000000]          <1>
   101 00000366 B801000000          <1>  mov rax, 1
   102 0000036B E8(00000000)        <1>  call fprintf
   163                                      PrintStr ". Calculaton time = ", [stdout]
    44                              <1>  section .data
    45 000001AD 2E2043616C63756C61- <1>  %%arg1 db %1,0
    45 000001B6 746F6E2074696D6520- <1>
    45 000001BF 3D2000              <1>
    46                              <1>  section .text
    47 00000370 488B3C25[00000000]  <1>  mov rdi, %2
    48 00000378 48BE-               <1>  mov rsi, %%arg1
    48 0000037A [AD01000000000000]  <1>
    49 00000382 B800000000          <1>  mov rax, 0
    50 00000387 E8(00000000)        <1>  call fprintf
   164                                      PrintLLUns [deltaTime], [stdout]
    82                              <1>  section .data
    83 000001C2 256C6C7500          <1>  %%arg1 db "%llu",0
    84                              <1>  section .text
    85 0000038C 488B3C25[00000000]  <1>  mov rdi, %2
    86 00000394 48BE-               <1>  mov rsi, %%arg1
    86 00000396 [C201000000000000]  <1>
    87 0000039E 488B1425[40000000]  <1>  mov rdx, %1
    88 000003A6 B800000000          <1>  mov rax, 0
    89 000003AB E8(00000000)        <1>  call fprintf
   165                                      PrintStr " sec, ", [stdout]
    44                              <1>  section .data
    45 000001C7 207365632C2000      <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 000003B0 488B3C25[00000000]  <1>  mov rdi, %2
    48 000003B8 48BE-               <1>  mov rsi, %%arg1
    48 000003BA [C701000000000000]  <1>
    49 000003C2 B800000000          <1>  mov rax, 0
    50 000003C7 E8(00000000)        <1>  call fprintf
   166                                      PrintLLUns [deltaTime+8], [stdout]
    82                              <1>  section .data
    83 000001CE 256C6C7500          <1>  %%arg1 db "%llu",0
    84                              <1>  section .text
    85 000003CC 488B3C25[00000000]  <1>  mov rdi, %2
    86 000003D4 48BE-               <1>  mov rsi, %%arg1
    86 000003D6 [CE01000000000000]  <1>
    87 000003DE 488B1425[48000000]  <1>  mov rdx, %1
    88 000003E6 B800000000          <1>  mov rax, 0
    89 000003EB E8(00000000)        <1>  call fprintf
   167                                      PrintStr " nsec", [stdout]
    44                              <1>  section .data
    45 000001D3 206E73656300        <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 000003F0 488B3C25[00000000]  <1>  mov rdi, %2
    48 000003F8 48BE-               <1>  mov rsi, %%arg1
    48 000003FA [D301000000000000]  <1>
    49 00000402 B800000000          <1>  mov rax, 0
    50 00000407 E8(00000000)        <1>  call fprintf
   168                                      PrintStr 10, [stdout]
    44                              <1>  section .data
    45 000001D9 0A00                <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 0000040C 488B3C25[00000000]  <1>  mov rdi, %2
    48 00000414 48BE-               <1>  mov rsi, %%arg1
    48 00000416 [D901000000000000]  <1>
    49 0000041E B800000000          <1>  mov rax, 0
    50 00000423 E8(00000000)        <1>  call fprintf
   169                                  
   170                                      FileOpen [r13+32], "w", ofst2
   127                              <1>  section .data
   128 000001DB 7700                <1>  %%rw db %2,0
   129                              <1>  section .text
   130 00000428 498B7D20            <1>  mov rdi, %1
   131 0000042C 488D3425[DB010000]  <1>  lea rsi, %%rw
   132 00000434 B800000000          <1>  mov rax, 0
   133 00000439 E8(00000000)        <1>  call fopen
   134 0000043E 48890425[60000000]  <1>  mov [%3], rax
   171                                      PrintStr  "Perimeter sum = ", [ofst2]
    44                              <1>  section .data
    45 000001DD 506572696D65746572- <1>  %%arg1 db %1,0
    45 000001E6 2073756D203D2000    <1>
    46                              <1>  section .text
    47 00000446 488B3C25[60000000]  <1>  mov rdi, %2
    48 0000044E 48BE-               <1>  mov rsi, %%arg1
    48 00000450 [DD01000000000000]  <1>
    49 00000458 B800000000          <1>  mov rax, 0
    50 0000045D E8(00000000)        <1>  call fprintf
   172                                      PrintDouble [sum], [ofst2]
    95                              <1>  section .data
    96 000001EE 256700              <1>  %%arg1 db "%g",0
    97                              <1>  section .text
    98 00000462 488B3C25[60000000]  <1>  mov rdi, %2
    99 0000046A 48BE-               <1>  mov rsi, %%arg1
    99 0000046C [EE01000000000000]  <1>
   100 00000474 F20F100425-         <1>  movsd xmm0, %1
   100 00000479 [08000000]          <1>
   101 0000047D B801000000          <1>  mov rax, 1
   102 00000482 E8(00000000)        <1>  call fprintf
   173                                      PrintStr ". Calculaton time = ", [ofst2]
    44                              <1>  section .data
    45 000001F1 2E2043616C63756C61- <1>  %%arg1 db %1,0
    45 000001FA 746F6E2074696D6520- <1>
    45 00000203 3D2000              <1>
    46                              <1>  section .text
    47 00000487 488B3C25[60000000]  <1>  mov rdi, %2
    48 0000048F 48BE-               <1>  mov rsi, %%arg1
    48 00000491 [F101000000000000]  <1>
    49 00000499 B800000000          <1>  mov rax, 0
    50 0000049E E8(00000000)        <1>  call fprintf
   174                                      PrintLLUns [deltaTime], [ofst2]
    82                              <1>  section .data
    83 00000206 256C6C7500          <1>  %%arg1 db "%llu",0
    84                              <1>  section .text
    85 000004A3 488B3C25[60000000]  <1>  mov rdi, %2
    86 000004AB 48BE-               <1>  mov rsi, %%arg1
    86 000004AD [0602000000000000]  <1>
    87 000004B5 488B1425[40000000]  <1>  mov rdx, %1
    88 000004BD B800000000          <1>  mov rax, 0
    89 000004C2 E8(00000000)        <1>  call fprintf
   175                                      PrintStr " sec, ", [ofst2]
    44                              <1>  section .data
    45 0000020B 207365632C2000      <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 000004C7 488B3C25[60000000]  <1>  mov rdi, %2
    48 000004CF 48BE-               <1>  mov rsi, %%arg1
    48 000004D1 [0B02000000000000]  <1>
    49 000004D9 B800000000          <1>  mov rax, 0
    50 000004DE E8(00000000)        <1>  call fprintf
   176                                      PrintLLUns [deltaTime+8], [ofst2]
    82                              <1>  section .data
    83 00000212 256C6C7500          <1>  %%arg1 db "%llu",0
    84                              <1>  section .text
    85 000004E3 488B3C25[60000000]  <1>  mov rdi, %2
    86 000004EB 48BE-               <1>  mov rsi, %%arg1
    86 000004ED [1202000000000000]  <1>
    87 000004F5 488B1425[48000000]  <1>  mov rdx, %1
    88 000004FD B800000000          <1>  mov rax, 0
    89 00000502 E8(00000000)        <1>  call fprintf
   177                                      PrintStr " nsec", [ofst2]
    44                              <1>  section .data
    45 00000217 206E73656300        <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 00000507 488B3C25[60000000]  <1>  mov rdi, %2
    48 0000050F 48BE-               <1>  mov rsi, %%arg1
    48 00000511 [1702000000000000]  <1>
    49 00000519 B800000000          <1>  mov rax, 0
    50 0000051E E8(00000000)        <1>  call fprintf
   178                                      PrintStr 10, [ofst2]
    44                              <1>  section .data
    45 0000021D 0A00                <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 00000523 488B3C25[60000000]  <1>  mov rdi, %2
    48 0000052B 48BE-               <1>  mov rsi, %%arg1
    48 0000052D [1D02000000000000]  <1>
    49 00000535 B800000000          <1>  mov rax, 0
    50 0000053A E8(00000000)        <1>  call fprintf
   179                                      FileClose [ofst2]
   140 0000053F 488B3C25[60000000]  <1>  mov rdi, %1
   141 00000547 B800000000          <1>  mov rax, 0
   142 0000054C E8(00000000)        <1>  call fclose
   180                                  
   181                                      PrintStrLn "Stop", [stdout]
    57                              <1>  section .data
    58 0000021F 53746F700A00        <1>  %%arg1 db %1,10,0
    59                              <1>  section .text
    60 00000551 488B3C25[00000000]  <1>  mov rdi, %2
    61 00000559 48BE-               <1>  mov rsi, %%arg1
    61 0000055B [1F02000000000000]  <1>
    62 00000563 B800000000          <1>  mov rax, 0
    63 00000568 E8(00000000)        <1>  call fprintf
   182 0000056D EB5C                        jmp .return
   183                                  .fall1:
   184                                      PrintStr "incorrect numer of figures = ", [stdout]
    44                              <1>  section .data
    45 00000225 696E636F7272656374- <1>  %%arg1 db %1,0
    45 0000022E 206E756D6572206F66- <1>
    45 00000237 206669677572657320- <1>
    45 00000240 3D2000              <1>
    46                              <1>  section .text
    47 0000056F 488B3C25[00000000]  <1>  mov rdi, %2
    48 00000577 48BE-               <1>  mov rsi, %%arg1
    48 00000579 [2502000000000000]  <1>
    49 00000581 B800000000          <1>  mov rax, 0
    50 00000586 E8(00000000)        <1>  call fprintf
   185                                      PrintInt [num], [stdout]
    69                              <1>  section .data
    70 00000243 256400              <1>  %%arg1 db "%d",0
    71                              <1>  section .text
    72 0000058B 488B3C25[00000000]  <1>  mov rdi, %2
    73 00000593 48BE-               <1>  mov rsi, %%arg1
    73 00000595 [4302000000000000]  <1>
    74 0000059D 488B1425[04000000]  <1>  mov rdx, %1
    75 000005A5 B800000000          <1>  mov rax, 0
    76 000005AA E8(00000000)        <1>  call fprintf
   186                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
    57                              <1>  section .data
    58 00000246 2E205365742030203C- <1>  %%arg1 db %1,10,0
    58 0000024F 206E756D626572203C- <1>
    58 00000258 3D2031303030300A00  <1>
    59                              <1>  section .text
    60 000005AF 488B3C25[00000000]  <1>  mov rdi, %2
    61 000005B7 48BE-               <1>  mov rsi, %%arg1
    61 000005B9 [4602000000000000]  <1>
    62 000005C1 B800000000          <1>  mov rax, 0
    63 000005C6 E8(00000000)        <1>  call fprintf
   187                                  .return:
   188 000005CB C9                      leave
   189 000005CC C3                      ret
