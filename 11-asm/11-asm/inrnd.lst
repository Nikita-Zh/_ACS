     1                                  ; file.asm - использование файлов в NASM
     2                                  extern printf
     3                                  extern rand
     4                                  
     5                                  extern SPHERE
     6                                  extern PARALLELEPIPED
     7                                  
     8                                  
     9                                  ;----------------------------------------------
    10                                  ; // rnd.c - содержит генератор случайных чисел в диапазоне от 1 до 20
    11                                  ; int Random() {
    12                                  ;     return rand() % 20 + 1;
    13                                  ; }
    14                                  global Random
    15                                  Random:
    16                                  section .data
    17 00000000 1400000000000000            .i20     dq      20
    18 00000008 52616E646F6D206E75-         .rndNumFmt       db "Random number = %d",10,0
    18 00000011 6D626572203D202564-
    18 0000001A 0A00               
    19                                  section .text
    20 00000000 55                      push rbp
    21 00000001 4889E5                  mov rbp, rsp
    22                                  
    23 00000004 4831C0                      xor     rax, rax    ;
    24 00000007 E8(00000000)                call    rand        ; запуск генератора случайных чисел
    25 0000000C 4831D2                      xor     rdx, rdx    ; обнуление перед делением
    26 0000000F 48F73C25[00000000]          idiv    qword[.i20]       ; (/%) -> остаток в rdx
    27 00000017 4889D0                      mov     rax, rdx
    28 0000001A 48FFC0                      inc     rax         ; должно сформироваться случайное число
    29                                  
    30                                      ;mov     rdi, .rndNumFmt
    31                                      ;mov     esi, eax
    32                                      ;xor     rax, rax
    33                                      ;call    printf
    34                                  
    35                                  
    36 0000001D C9                      leave
    37 0000001E C3                      ret
    38                                  
    39                                  ;----------------------------------------------
    40                                  ;// Случайный ввод параметров прямоугольника
    41                                  ;void InRndSPHERE(void *r) {
    42                                      ;int x = Random();
    43                                      ;*((int*)r) = x;
    44                                      ;int y = Random();
    45                                      ;*((int*)(r+intSize)) = y;
    46                                  ;//     printf("    SPHERE %d %d\n", *((int*)r), *((int*)r+1));
    47                                  ;}
    48                                  global InRndSPHERE
    49                                  InRndSPHERE:
    50                                  section .bss
    51 00000000 ????????????????            .prect  resq 1   ; адрес прямоугольника
    52                                  section .text
    53 0000001F 55                      push rbp
    54 00000020 4889E5                  mov rbp, rsp
    55                                  
    56                                      ; В rdi адрес прямоугольника
    57 00000023 48893C25[00000000]          mov     [.prect], rdi
    58                                      ; Генерация сторон прямоугольника
    59 0000002B E8D0FFFFFF                  call    Random
    60 00000030 488B1C25[00000000]          mov     rbx, [.prect]
    61 00000038 8903                        mov     [rbx], eax
    62 0000003A E8C1FFFFFF                  call    Random
    63 0000003F 488B1C25[00000000]          mov     rbx, [.prect]
    64 00000047 894304                      mov     [rbx+4], eax
    65                                  
    66 0000004A C9                      leave
    67 0000004B C3                      ret
    68                                  
    69                                  ;----------------------------------------------
    70                                  ;// Случайный ввод параметров треугольника
    71                                  ;void InRndPARALLELEPIPED(void *t) {
    72                                      ;int a, b, c;
    73                                      ;a = *((int*)t) = Random();
    74                                      ;b = *((int*)(t+intSize)) = Random();
    75                                      ;do {
    76                                          ;c = *((int*)(t+2*intSize)) = Random();
    77                                      ;} while((c >= a + b) || (a >= c + b) || (b >= c + a));
    78                                  ;//     printf("    PARALLELEPIPED %d %d %d\n", *((int*)t), *((int*)t+1), *((int*)t+2));
    79                                  ;}
    80                                  global InRndPARALLELEPIPED
    81                                  InRndPARALLELEPIPED:
    82                                  section .bss
    83 00000008 ????????????????            .ptrian  resq 1   ; адрес треугольника
    84                                  section .text
    85 0000004C 55                      push rbp
    86 0000004D 4889E5                  mov rbp, rsp
    87                                  
    88                                      ; В rdi адрес треугольника
    89 00000050 48893C25[08000000]          mov     [.ptrian], rdi
    90                                      ; Генерация сторон треугольника
    91 00000058 E8A3FFFFFF                  call    Random
    92 0000005D 488B1C25[08000000]          mov     rbx, [.ptrian]
    93 00000065 8903                        mov     [rbx], eax
    94 00000067 E894FFFFFF                  call    Random
    95 0000006C 488B1C25[08000000]          mov     rbx, [.ptrian]
    96 00000074 894304                      mov     [rbx+4], eax
    97                                  .repeat:
    98 00000077 E884FFFFFF                  call    Random
    99 0000007C 488B1C25[08000000]          mov     rbx, [.ptrian]
   100 00000084 894308                      mov     [rbx+8], eax    ; c
   101                                      ; Проверка корректности сторон
   102 00000087 8B0B                        mov     ecx, [rbx]      ; a
   103 00000089 8B5304                      mov     edx, [rbx+4]      ; b
   104 0000008C 89C3                        mov     ebx, eax        ; c
   105 0000008E 01C8                        add     eax, ecx        ; c+a
   106 00000090 39C2                        cmp     edx, eax        ; b - (c+a)
   107 00000092 7DE3                        jge     .repeat
   108 00000094 89C8                        mov     eax, ecx
   109 00000096 01D0                        add     eax, edx        ; a+b
   110 00000098 39C3                        cmp     ebx, eax        ; c - (a+b)
   111 0000009A 7DDB                        jge     .repeat
   112 0000009C 89D0                        mov     eax, edx
   113 0000009E 01D8                        add     eax, ebx        ; b+c
   114 000000A0 39C1                        cmp     ecx, eax        ; a - (b+c)
   115 000000A2 7DD3                        jge     .repeat
   116                                  
   117 000000A4 C9                      leave
   118 000000A5 C3                      ret
   119                                  
   120                                  ;----------------------------------------------
   121                                  ;// Случайный ввод обобщенной фигуры
   122                                  ;int InRndShape(void *s) {
   123                                      ;int k = rand() % 2 + 1;
   124                                      ;switch(k) {
   125                                          ;case 1:
   126                                              ;*((int*)s) = SPHERE;
   127                                              ;InRndSPHERE(s+intSize);
   128                                              ;return 1;
   129                                          ;case 2:
   130                                              ;*((int*)s) = PARALLELEPIPED;
   131                                              ;InRndPARALLELEPIPED(s+intSize);
   132                                              ;return 1;
   133                                          ;default:
   134                                              ;return 0;
   135                                      ;}
   136                                  ;}
   137                                  global InRndShape
   138                                  InRndShape:
   139                                  section .data
   140 0000001C 52616E646F6D206E75-         .rndNumFmt       db "Random number = %d",10,0
   140 00000025 6D626572203D202564-
   140 0000002E 0A00               
   141                                  section .bss
   142 00000010 ????????????????            .pshape     resq    1   ; адрес фигуры
   143 00000018 ????????                    .key        resd    1   ; ключ
   144                                  section .text
   145 000000A6 55                      push rbp
   146 000000A7 4889E5                  mov rbp, rsp
   147                                  
   148                                      ; В rdi адрес фигуры
   149 000000AA 48893C25[10000000]          mov [.pshape], rdi
   150                                  
   151                                      ; Формирование признака фигуры
   152 000000B2 4831C0                      xor     rax, rax    ;
   153 000000B5 E8(00000000)                call    rand        ; запуск генератора случайных чисел
   154 000000BA 83E001                      and     eax, 1      ; очистка результата кроме младшего разряда (0 или 1)
   155 000000BD FFC0                        inc     eax         ; фомирование признака фигуры (1 или 2)
   156                                  
   157                                      ;mov     [.key], eax
   158                                      ;mov     rdi, .rndNumFmt
   159                                      ;mov     esi, [.key]
   160                                      ;xor     rax, rax
   161                                      ;call    printf
   162                                      ;mov     eax, [.key]
   163                                  
   164 000000BF 488B3C25[10000000]          mov     rdi, [.pshape]
   165 000000C7 8907                        mov     [rdi], eax      ; запись ключа в фигуру
   166 000000C9 3B0425[00000000]            cmp eax, [SPHERE]
   167 000000D0 740D                        je .rectInrnd
   168 000000D2 3B0425[00000000]            cmp eax, [PARALLELEPIPED]
   169 000000D9 7414                        je .trianInRnd
   170 000000DB 31C0                        xor eax, eax        ; код возврата = 0
   171 000000DD EB1E                        jmp     .return
   172                                  .rectInrnd:
   173                                      ; Генерация прямоугольника
   174 000000DF 4883C704                    add     rdi, 4
   175 000000E3 E837FFFFFF                  call    InRndSPHERE
   176 000000E8 B801000000                  mov     eax, 1      ;код возврата = 1
   177 000000ED EB0E                        jmp     .return
   178                                  .trianInRnd:
   179                                      ; Генерация треугольника
   180 000000EF 4883C704                    add     rdi, 4
   181 000000F3 E854FFFFFF                  call    InRndPARALLELEPIPED
   182 000000F8 B801000000                  mov     eax, 1      ;код возврата = 1
   183                                  .return:
   184 000000FD C9                      leave
   185 000000FE C3                      ret
   186                                  
   187                                  ;----------------------------------------------
   188                                  ;// Случайный ввод содержимого контейнера
   189                                  ;void InRndContainer(void *c, int *len, int size) {
   190                                      ;void *tmp = c;
   191                                      ;while(*len < size) {
   192                                          ;if(InRndShape(tmp)) {
   193                                              ;tmp = tmp + shapeSize;
   194                                              ;(*len)++;
   195                                          ;}
   196                                      ;}
   197                                  ;}
   198                                  global InRndContainer
   199                                  InRndContainer:
   200                                  section .bss
   201 0000001C ????????????????            .pcont  resq    1   ; адрес контейнера
   202 00000024 ????????????????            .plen   resq    1   ; адрес для сохранения числа введенных элементов
   203 0000002C ????????                    .psize  resd    1   ; число порождаемых элементов
   204                                  section .text
   205 000000FF 55                      push rbp
   206 00000100 4889E5                  mov rbp, rsp
   207                                  
   208 00000103 48893C25[1C000000]          mov [.pcont], rdi   ; сохраняется указатель на контейнер
   209 0000010B 48893425[24000000]          mov [.plen], rsi    ; сохраняется указатель на длину
   210 00000113 891425[2C000000]            mov [.psize], edx    ; сохраняется число порождаемых элементов
   211                                      ; В rdi адрес начала контейнера
   212 0000011A 31DB                        xor ebx, ebx        ; число фигур = 0
   213                                  .loop:
   214 0000011C 39D3                        cmp ebx, edx
   215 0000011E 7D1A                        jge     .return
   216                                      ; сохранение рабочих регистров
   217 00000120 57                          push rdi
   218 00000121 53                          push rbx
   219 00000122 52                          push rdx
   220                                  
   221 00000123 E87EFFFFFF                  call    InRndShape     ; ввод фигуры
   222 00000128 4883F800                    cmp rax, 0          ; проверка успешности ввода
   223 0000012C 7E0C                        jle  .return        ; выход, если признак меньше или равен 0
   224                                  
   225 0000012E 5A                          pop rdx
   226 0000012F 5B                          pop rbx
   227 00000130 48FFC3                      inc rbx
   228                                  
   229 00000133 5F                          pop rdi
   230 00000134 4883C710                    add rdi, 16             ; адрес следующей фигуры
   231                                  
   232 00000138 EBE2                        jmp .loop
   233                                  .return:
   234 0000013A 488B0425[24000000]          mov rax, [.plen]    ; перенос указателя на длину
   235 00000142 8918                        mov [rax], ebx      ; занесение длины
   236 00000144 C9                      leave
   237 00000145 C3                      ret
