     1                                  ;------------------------------------------------------------------------------
     2                                  ; perimeter.asm - единица компиляции, вбирающая функции вычисления периметра
     3                                  ;------------------------------------------------------------------------------
     4                                  
     5                                  extern SPHERE
     6                                  extern PARALLELEPIPED
     7                                  
     8                                  ;----------------------------------------------
     9                                  ; Вычисление периметра прямоугольника
    10                                  ;double PerimeterSPHERE(void *r) {
    11                                  ;    return 2.0 * (*((int*)r)
    12                                  ;           + *((int*)(r+intSize)));
    13                                  ;}
    14                                  global PerimeterSPHERE
    15                                  PerimeterSPHERE:
    16                                  section .text
    17 00000000 55                      push rbp
    18 00000001 4889E5                  mov rbp, rsp
    19                                  
    20                                      ; В rdi адрес прямоугольника
    21 00000004 8B07                        mov eax, [rdi]
    22 00000006 034704                      add eax, [rdi+4]
    23 00000009 D1E0                        shl eax, 1
    24 0000000B F20F2AC0                    cvtsi2sd    xmm0, eax
    25                                  
    26 0000000F C9                      leave
    27 00000010 C3                      ret
    28                                  
    29                                  ;----------------------------------------------
    30                                  ; double PerimeterPARALLELEPIPED(void *t) {
    31                                  ;    return (double)(*((int*)t)
    32                                  ;       + *((int*)(t+intSize))
    33                                  ;       + *((int*)(t+2*intSize)));
    34                                  ;}
    35                                  global PerimeterPARALLELEPIPED
    36                                  PerimeterPARALLELEPIPED:
    37                                  section .text
    38 00000011 55                      push rbp
    39 00000012 4889E5                  mov rbp, rsp
    40                                  
    41                                      ; В rdi адрес треугольника
    42 00000015 8B07                        mov eax, [rdi]
    43 00000017 034704                      add eax, [rdi+4]
    44 0000001A 034708                      add eax, [rdi+8]
    45 0000001D F20F2AC0                    cvtsi2sd    xmm0, eax
    46                                  
    47 00000021 C9                      leave
    48 00000022 C3                      ret
    49                                  
    50                                  ;----------------------------------------------
    51                                  ; Вычисление периметра фигуры
    52                                  ;double PerimeterShape(void *s) {
    53                                  ;    int k = *((int*)s);
    54                                  ;    if(k == SPHERE) {
    55                                  ;        return PerimeterSPHERE(s+intSize);
    56                                  ;    }
    57                                  ;    else if(k == PARALLELEPIPED) {
    58                                  ;        return PerimeterPARALLELEPIPED(s+intSize);
    59                                  ;    }
    60                                  ;    else {
    61                                  ;        return 0.0;
    62                                  ;    }
    63                                  ;}
    64                                  global PerimeterShape
    65                                  PerimeterShape:
    66                                  section .text
    67 00000023 55                      push rbp
    68 00000024 4889E5                  mov rbp, rsp
    69                                  
    70                                      ; В rdi адрес фигуры
    71 00000027 8B07                        mov eax, [rdi]
    72 00000029 3B0425[00000000]            cmp eax, [SPHERE]
    73 00000030 7411                        je rectPerimeter
    74 00000032 3B0425[00000000]            cmp eax, [PARALLELEPIPED]
    75 00000039 7413                        je trianPerimeter
    76 0000003B 31C0                        xor eax, eax
    77 0000003D F20F2AC0                    cvtsi2sd    xmm0, eax
    78 00000041 EB14                        jmp     return
    79                                  rectPerimeter:
    80                                      ; Вычисление периметра прямоугольника
    81 00000043 4883C704                    add     rdi, 4
    82 00000047 E8B4FFFFFF                  call    PerimeterSPHERE
    83 0000004C EB09                        jmp     return
    84                                  trianPerimeter:
    85                                      ; Вычисление периметра треугольника
    86 0000004E 4883C704                    add     rdi, 4
    87 00000052 E8BAFFFFFF                  call    PerimeterPARALLELEPIPED
    88                                  return:
    89 00000057 C9                      leave
    90 00000058 C3                      ret
    91                                  
    92                                  ;----------------------------------------------
    93                                  ;// Вычисление суммы периметров всех фигур в контейнере
    94                                  ;double PerimeterSumContainer(void *c, int len) {
    95                                  ;    double sum = 0.0;
    96                                  ;    void *tmp = c;
    97                                  ;    for(int i = 0; i < len; i++) {
    98                                  ;        sum += PerimeterShape(tmp);
    99                                  ;        tmp = tmp + shapeSize;
   100                                  ;    }
   101                                  ;    return sum;
   102                                  ;}
   103                                  global PerimeterSumContainer
   104                                  PerimeterSumContainer:
   105                                  section .data
   106 00000000 0000000000000000            .sum    dq  0.0
   107                                  section .text
   108 00000059 55                      push rbp
   109 0000005A 4889E5                  mov rbp, rsp
   110                                  
   111                                      ; В rdi адрес начала контейнера
   112 0000005D 89F3                        mov ebx, esi            ; число фигур
   113 0000005F 31C9                        xor ecx, ecx            ; счетчик фигур
   114 00000061 F20F100C25-                 movsd xmm1, [.sum]      ; перенос накопителя суммы в регистр 1
   114 00000066 [00000000]         
   115                                  .loop:
   116 0000006A 39D9                        cmp ecx, ebx            ; проверка на окончание цикла
   117 0000006C 7D18                        jge .return             ; Перебрали все фигуры
   118                                  
   119 0000006E 4989FA                      mov r10, rdi            ; сохранение начала фигуры
   120 00000071 E8ADFFFFFF                  call PerimeterShape     ; Получение периметра первой фигуры
   121 00000076 F20F58C8                    addsd xmm1, xmm0        ; накопление суммы
   122 0000007A 48FFC1                      inc rcx                 ; индекс следующей фигуры
   123 0000007D 4983C210                    add r10, 16             ; адрес следующей фигуры
   124 00000081 4C89D7                      mov rdi, r10            ; восстановление для передачи параметра
   125 00000084 EBE4                        jmp .loop
   126                                  .return:
   127 00000086 F20F10C1                    movsd xmm0, xmm1
   128 0000008A C9                      leave
   129 0000008B C3                      ret
